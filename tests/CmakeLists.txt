
set(APP_INCLUDE_DIRS 
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${GTEST_SOURCE_DIR}/include")
include_directories(${APP_INCLUDE_DIRS})

# Tests executable
add_executable(HTestExec
    math_tests/vector_operations.cpp
    math_tests/quaternion_operations.cpp
    math_tests/rotator_operations.cpp
    math_tests/matrix_operations.cpp
    coordinates_tests/general_coordinate_tests.cpp
    coordinates_tests/earth_tests.cpp
    ephemeris_tests/spice.cpp
    disturbance_tests/earth_gravity.cpp
    # mission_tests/manoeuvre.cpp
    mission_tests/kepler.cpp
)


# Set Warning Level
if(MSVC)
  target_compile_options(HTestExec PRIVATE
  /W4     # All reasonable warnings
  /WX     # Treat warnings as errors
  /w14242 # 'identfier': conversion from 'type1' to 'type1', possible loss of data
  /w14254 # 'operator': conversion from 'type1:field_bits' to 'type2:field_bits', possible loss of data
  /w14263 # 'function': member function does not override any base class virtual member function
  /w14265 # 'classname': class has virtual functions, but destructor is not virtual instances of this class may not be destructed correctly
  /w14287 # 'operator': unsigned/negative constant mismatch
  /we4289 # nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside the for-loop scope
  /w14296 # 'operator': expression is always 'boolean_value'
  /w14311 # 'variable': pointer truncation from 'type1' to 'type2'
  /w14545 # expression before comma evaluates to a function which is missing an argument list
  /w14546 # function call before comma missing argument list
  /w14547 # 'operator': operator before comma has no effect; expected operator with side-effect
  /w14549 # 'operator': operator before comma has no effect; did you intend 'operator'?
  /w14619 # pragma warning: there is no warning number 'number'
  /w14640 # Enable warning on thread un-safe static member initialization
  /w14826 # Conversion from 'type1' to 'type_2' is sign-extended. This may cause unexpected runtime behavior.
  /w14905 # wide string literal cast to 'LPSTR'
  /w14906 # string literal cast to 'LPWSTR'
  /w14928 # illegal copy-initialization; more than one user-defined conversion has been implicitly applied
)
else()
  target_compile_options(HTestExec PRIVATE
  -Wall                    # Reasonable and standard
  -Wextra                  # Reasonable and standard
  -Wpedantic               # (all versions of GCC, Clang >= 3.2) warn if non-standard C++ is used
  -Werror                  # Treat warnings as errors
  -Wshadow                 # warn the user if a variable declaration shadows one from a parent context
  -Wnon-virtual-dtor       # warn the user if a class with virtual functions has a non-virtual destructor. This helps catch hard to track down memory errors
  -Wold-style-cast         # warn for c-style casts
  -Wcast-align             # warn for potential performance problem casts
  -Wunused                 # warn on anything being unused
  -Woverloaded-virtual     # warn if you overload (not override) a virtual function

  # NOTE: GCEM introduces a type conversion warning, in MSVC we can selectively disable this warning for a particular
  # snippit of code, however, this functionality does not appear to work for this particular flag in gcc. Hence, we must unfortunately 
  # disable it globally
  #
  # -Wconversion             # warn on type conversions that may lose data

  -Wsign-conversion        # Clang all versions, GCC >= 4.3) warn on sign conversions
  -Wmisleading-indentation # (only in GCC >= 6.0) warn if indentation implies blocks where blocks do not exist
  -Wduplicated-cond        # (only in GCC >= 6.0) warn if if / else chain has duplicated conditions
  -Wduplicated-branches    # (only in GCC >= 7.0) warn if if / else branches have duplicated code
  -Wlogical-op             # (only in GCC) warn about logical operations being used where bitwise were probably wanted
  -Wnull-dereference       # (only in GCC >= 6.0) warn if a null dereference is detected
  -Wuseless-cast           # (only in GCC >= 4.8) warn if you perform a cast to the same type
  -Wdouble-promotion       # (GCC >= 4.6, Clang >= 3.8) warn if float is implicit promoted to double
  -Wformat=2               # warn on security issues around functions that format output (ie printf)
  # -Wlifetime               # (only special branch of Clang currently) shows object lifetime issues
  -fconcepts               # enable auto declarations inside parameter packs
)
endif()

add_subdirectory("${GTEST_DIR}" "${CMAKE_BINARY_DIR}/googletest")

# Link Google Test libraries to the executable
target_link_libraries(HTestExec PRIVATE CppSpice HEphemerisLib gtest_main gtest)
